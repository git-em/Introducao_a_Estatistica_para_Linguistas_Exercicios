CONT.FON.PREC = col_factor(levels = c("i", "e", "3", "a", "0", "o", "u")),
TONICIDADE = col_factor(levels = c("atona", "tonica")),
POSICAO.R = col_factor(levels = c("final", "medial")),
CLASSE.MORFOLOGICA = col_factor(levels = c("adjetivo", "adverbio", "conj.prep", "morf.inf", "substantivo", "verbo")),
IDADE = col_integer(),
INDICE.SOCIO = col_double(),
FREQUENCIA = col_double()
)
)
dados$CONT.FON.SEG <- fct_collapse(dados$CONT.FON.SEG,
pausa = "#",
coronal = c("t", "d", "s", "z", "x", "j", "ts", "dz", "l", "n"),
labial = c("p", "b", "f", "v", "m"),
dorsal = c("k", "g", "h")
)
dados$CONT.FON.SEG <- fct_relevel(dados$CONT.FON.SEG, "pausa", "coronal", "dorsal", "labial")
setwd("~/Dropbox/_R/swirl/arquivosDados/testandoCurso")
### Carregar arquivo DadosRT.csv
dados <- read_csv("DadosRT.csv",
col_types = cols(.default = col_factor(),
VD = col_factor(levels = c("tepe", "retroflexo")),
FAIXA.ETARIA = col_factor(levels = c("1a", "2a", "3a")),
ESCOLARIDADE = col_factor(levels = c("fundamental", "medio", "superior"))
REGIAO = col_factor(levels = c("central", "periferica")),
CONT.FON.PREC = col_factor(levels = c("i", "e", "3", "a", "0", "o", "u")),
TONICIDADE = col_factor(levels = c("atona", "tonica")),
POSICAO.R = col_factor(levels = c("final", "medial")),
CLASSE.MORFOLOGICA = col_factor(levels = c("adjetivo", "adverbio", "conj.prep", "morf.inf", "substantivo", "verbo")),
IDADE = col_integer(),
INDICE.SOCIO = col_double(),
FREQUENCIA = col_double()
)
)
setwd("~/Dropbox/_R/swirl/arquivosDados/testandoCurso")
### Carregar arquivo DadosRT.csv
dados <- read_csv("DadosRT.csv",
col_types = cols(.default = col_factor(),
VD = col_factor(levels = c("tepe", "retroflexo")),
FAIXA.ETARIA = col_factor(levels = c("1a", "2a", "3a")),
ESCOLARIDADE = col_factor(levels = c("fundamental", "medio", "superior")),
REGIAO = col_factor(levels = c("central", "periferica")),
CONT.FON.PREC = col_factor(levels = c("i", "e", "3", "a", "0", "o", "u")),
TONICIDADE = col_factor(levels = c("atona", "tonica")),
POSICAO.R = col_factor(levels = c("final", "medial")),
CLASSE.MORFOLOGICA = col_factor(levels = c("adjetivo", "adverbio", "conj.prep", "morf.inf", "substantivo", "verbo")),
IDADE = col_integer(),
INDICE.SOCIO = col_double(),
FREQUENCIA = col_double()
)
)
dados$CONT.FON.SEG <- fct_collapse(dados$CONT.FON.SEG,
pausa = "#",
coronal = c("t", "d", "s", "z", "x", "j", "ts", "dz", "l", "n"),
labial = c("p", "b", "f", "v", "m"),
dorsal = c("k", "g", "h")
)
setwd("~/Dropbox/_R/swirl/arquivosDados/testandoCurso")
### Carregar arquivo DadosRT.csv
dados <- read_csv("DadosRT.csv",
col_types = cols(.default = col_factor(),
VD = col_factor(levels = c("tepe", "retroflexo")),
FAIXA.ETARIA = col_factor(levels = c("1a", "2a", "3a")),
ESCOLARIDADE = col_factor(levels = c("fundamental", "medio", "superior")),
REGIAO = col_factor(levels = c("central", "periferica")),
CONT.FON.PREC = col_factor(levels = c("i", "e", "3", "a", "0", "o", "u")),
TONICIDADE = col_factor(levels = c("atona", "tonica")),
POSICAO.R = col_factor(levels = c("final", "medial")),
CLASSE.MORFOLOGICA = col_factor(levels = c("adjetivo", "adverbio", "conj.prep", "morf.inf", "substantivo", "verbo")),
IDADE = col_integer(),
INDICE.SOCIO = col_double(),
FREQUENCIA = col_double()
)
)
dados$CONT.FON.SEG <- fct_collapse(dados$CONT.FON.SEG,
pausa = "#",
coronal = c("t", "d", "s", "z", "x", "j", "ts", "dz", "l", "n"),
labial = c("p", "b", "f", "v", "m"),
dorsal = c("k", "g", "h")
)
dados$CONT.FON.SEG <- fct_relevel(dados$CONT.FON.SEG, "pausa", "coronal", "dorsal", "labial")
demo_lesson()
#(4) Qual é o valor de índice C do modelo VD ~ POSICAO.R?"
0.540
#(6) Faça um modelo para testar se há correlação entre a pronúncia variável de /r/ em coda (VD) e a ESCOLARIDADE do falante. De acordo com o resultado deste modelo, não há diferença significativa entre quais níveis?"
modelo1 <- glm(VD ~ ESCOLARIDADE, data = dados, family = binomial)
summary(modelo1)
demo_lesson()
0.540
-0.151114 + (-0.017045 * 50)
#(10) Tranforme o valor de logodds calculado em (9) para um valor de probabilidade."
ilogit(-0.151114 + (-0.017045 * 50))
skip()
#(12) Calcule a probabilidade, em logodds, de um falante de 30 anos que mora na região central empregar o retroflexo.
-1.154424 + (30 * -0.006368)
#(13) Calcule a probabilidade, em logodds, de um falante de 30 anos que mora na região periférica empregar o retroflexo.
-1.154424 + 1.721518 + (30 * -0.006368) + (30 * -0.018164)
#(14) Transforme esta última medida de logodds em probabilidade."
ilogit(-1.154424 + 1.721518 + (30 * -0.006368) + (30 * -0.018164))
# Essas funções não existem na instalação base do R nem em outros pacotes
# de Gries 2013
logit <- function(x) { # logit: maps the range (0,1) to the range -infinite to + infinite)
log(x/(1-x)) # Gelman & Hill (2007:80)
}
}
#(14) Transforme esta última medida de logodds em probabilidade."
ilogit(-1.154424 + 1.721518 + (30 * -0.006368) + (30 * -0.018164))
ilogit <- function(x) { # inverse logit: maps the range (-∞,∞) to the range (0,1)
1/(1+exp(-x)) # Gelman & Hill (2007:80)
}
demo_lesson()
0.540
-0.151114 + (-0.017045 * 50)
#(10) Tranforme o valor de logodds calculado em (9) para um valor de probabilidade."
ilogit(-0.151114 + (-0.017045 * 50))
0.2682805
#(12) Calcule a probabilidade, em logodds, de um falante de 30 anos que mora na região central empregar o retroflexo.
-1.154424 + (30 * -0.006368)
#(13) Calcule a probabilidade, em logodds, de um falante de 30 anos que mora na região periférica empregar o retroflexo.
-1.154424 + 1.721518 + (30 * -0.006368) + (30 * -0.018164)
#(14) Transforme esta última medida de logodds em probabilidade."
ilogit(-1.154424 + 1.721518 + (30 * -0.006368) + (30 * -0.018164))
0.4578835
setwd("~/Dropbox/_R/swirl/Introducao_a_Estatistica_para_Linguistas/Estatistica_Inferencial_Regressao_Logistica_Parte2")
set_lesson("lesson.yaml")
rm(list = ls())
setwd("~/Dropbox/_R/swirl/arquivosDados/testandoCurso")
demo_lesson()
# (2%) Carregar pacote rms
library(rms)
# (3%) Carregar pacote effects
library(effects)
# (5%) Carregar pacote car
library(car)
# (6%) Carregar pacote lme4
library(lme4)
# (8%) Carregar pacote lmerTest
library(lmerTest)
# (11%) Checar estrutura do dataframe
str(dados)
# Checar ortogonalidade entre variáveis previsoras
# (13%_) Tabular CONT.FON.SEG e POSICAO.R
with(dados, table(CONT.FON.SEG, POSICAO.R))
# (15%) Tabular CLASSE.MORFOLOGICA e POSICAO.R
with(dados, table(CLASSE.MORFOLOGICA, POSICAO.R))
# (16%) Tabular CLASSE.MORFOLOGICA e TONICIDADE
with(dados, table(CLASSE.MORFOLOGICA, TONICIDADE))
# (19%_) Criar modelo com TONICIDADE, POSICAO.R, CLASSE.MORFOLOGIA e CONT.FON.SEG para verificar multicolinearidade
mod <- glm(VD ~
TONICIDADE +
POSICAO.R +
CLASSE.MORFOLOGICA +
CONT.FON.SEG,
data = dados, family = binomial)
# (23%) Aplicar a função vif() para avaliar multicolinearidade (requer pacote car)
car::vif(mod)
### (29%*) Modelo de regressão logística ####
modelo <- glm(VD ~
SEXO.GENERO +
FAIXA.ETARIA * REGIAO +
INDICE.SOCIO +
CONT.FON.PREC +
CONT.FON.SEG +
TONICIDADE +
POSICAO.R +
CLASSE.MORFOLOGICA,
data = dados, family = binomial)
# (31%) Aplicar summary() a modelo
summary(modelo)
# (52%) Criar modelo com lrm() (requer pacote rms)
lrm(VD ~ SEXO.GENERO +
FAIXA.ETARIA * REGIAO +
INDICE.SOCIO +
CONT.FON.PREC +
CONT.FON.SEG +
TONICIDADE +
POSICAO.R +
CLASSE.MORFOLOGICA,
data = dados)
### Função step(): step forward
# (55%) Criar modelo 0, com nenhum variável
m0 <- glm(VD ~ 1, data = dados, family = binomial)
# (56%) Rodar step foward
step(m0, direction = "forward", scope = ~ SEXO.GENERO +
FAIXA.ETARIA * REGIAO +
INDICE.SOCIO +
CONT.FON.PREC +
CONT.FON.SEG +
TONICIDADE +
POSICAO.R +
CLASSE.MORFOLOGICA)
# (56%) Rodar step foward
m.fw <- step(m0, direction = "forward", scope = ~ SEXO.GENERO +
FAIXA.ETARIA * REGIAO +
INDICE.SOCIO +
CONT.FON.PREC +
CONT.FON.SEG +
TONICIDADE +
POSICAO.R +
CLASSE.MORFOLOGICA)
# (60%) Visualizar resultado do step forward
m.fw
### Função step(): step backward
# (61%) Rodar step backward
m.bw <- step(modelo, direction = "backward")
# (65%) Visualizar resultado do step backward
m.bw
#  Função step(): step both
# (68%) Rodar step both
m.both <- step(m0, scope = ~ SEXO.GENERO +
FAIXA.ETARIA * REGIAO +
INDICE.SOCIO +
CONT.FON.PREC +
CONT.FON.SEG +
TONICIDADE +
POSICAO.R +
CLASSE.MORFOLOGICA)
# (69%) Visualizar resultado do step both
m.both
### (71%) Função drop1()
drop1(modelo, test = "LR")
### (74%*) Testar overfitting
mod.lrm <- lrm (VD ~
SEXO.GENERO +
FAIXA.ETARIA * REGIAO +
INDICE.SOCIO +
CONT.FON.PREC +
CONT.FON.SEG +
TONICIDADE +
POSICAO.R +
CLASSE.MORFOLOGICA,
data = dados, x = T, y = T)
### (76%) Função validate() - requer pacote rms
validate(mod.lrm, B = 200, bw = T)
### (a) A relação entre o logit e as variáveis previsoras numéricas é linear?
# (81%) Fazer modelo sem interação para aplicar crPlot
modelo2 <- glm(VD ~ SEXO.GENERO + FAIXA.ETARIA + REGIAO + INDICE.SOCIO + CONT.FON.PREC + CONT.FON.SEG + TONICIDADE + POSICAO.R + CLASSE.MORFOLOGICA, data = dados, family = binomial)
# (82%) Aplicar crPlot() ao modelo (requer pacote car)
crPlot(modelo2, var = "INDICE.SOCIO")
### (85%) (b) Há multicolinearidade?
car::vif(modelo)
### Criar modelo linear de efeitos mistos ###
# (90%) função glmer() depende dos pacotes lme4 e lmerTest
mod.glmer <- glmer(VD ~ SEXO.GENERO + FAIXA.ETARIA * REGIAO + INDICE.SOCIO + CONT.FON.PREC + CONT.FON.SEG + TONICIDADE + POSICAO.R + CLASSE.MORFOLOGICA + (1|PARTICIPANTE) + (1|ITEM.LEXICAL), data = dados, family = binomial)
# (92%) Aplicar summary() a mod.glmer
summary(mod.glmer)
# (95%) Visualizar resultados numéricos em gráfico de efeitos (requer pacote effects)
plot(allEffects(mod.glmer), type = "response")
# (97%) Gráficos de efeitos com argumento ask = T
plot(allEffects(mod.glmer), type = "response", ask = T)
demo_le
demo_lesson(from=60)
demo_lesson(from=70)
demo_lesson(from=70)
demo_lesson(from=50)
### (a) A relação entre o logit e as variáveis previsoras numéricas é linear?
# (81%) Fazer modelo sem interação para aplicar crPlot
modelo2 <- glm(VD ~ SEXO.GENERO + FAIXA.ETARIA + REGIAO + INDICE.SOCIO + CONT.FON.PREC + CONT.FON.SEG + TONICIDADE + POSICAO.R + CLASSE.MORFOLOGICA, data = dados, family = binomial)
# (82%) Aplicar crPlot() ao modelo (requer pacote car)
crPlot(modelo2, var = "INDICE.SOCIO")
### (85%) (b) Há multicolinearidade?
car::vif(modelo)
### Criar modelo linear de efeitos mistos ###
# (90%) função glmer() depende dos pacotes lme4 e lmerTest
mod.glmer <- glmer(VD ~
SEXO.GENERO +
FAIXA.ETARIA * REGIAO +
INDICE.SOCIO +
CONT.FON.PREC +
CONT.FON.SEG +
TONICIDADE +
POSICAO.R +
CLASSE.MORFOLOGICA +
(1|PARTICIPANTE) +
(1|ITEM.LEXICAL),
data = dados, family = binomial)
# (92%) Aplicar summary() a mod.glmer
summary(mod.glmer)
# (95%) Visualizar resultados numéricos em gráfico de efeitos (requer pacote effects)
plot(allEffects(mod.glmer), type = "response")
dados
demo_lesson()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
# (92%) Aplicar summary() a mod.glmer
summary(mod.glmer)
# (95%) Visualizar resultados numéricos em gráfico de efeitos (requer pacote effects)
plot(allEffects(mod.glmer), type = "response")
play()
# (fora do swirl) Gráficos de efeitos com argumento ask = T
plot(allEffects(mod.glmer), type = "response", ask = T)
nxt()
dados
setwd("~/Dropbox/_R/swirl/Introducao_a_Estatistica_para_Linguistas_Exercicios/Estatistica_Inferencial_Regressao_Logistica_Parte2")
set_lesson("lesson.yaml")
rm(list = ls())
setwd("~/Dropbox/_R/swirl/arquivosDados/testandoCurso")
demo_lesson()
ds <- read_csv("LabovDS.csv",
col_types = cols(.default = col_factor())) %>%
filter(r != "d") %>%
droplevels()
levels(ds$r)
levels(ds$store)
ds <- read_csv("LabovDS.csv",
col_types = cols(.default = col_factor(),
store = col_factor(levels = "Klein", "Macys", "Saks")
)) %>%
filter(r != "d") %>%
droplevels()
levels(ds$r)
setwd("~/Dropbox/_R/swirl/arquivosDados/testandoCurso")
ds <- read_csv("LabovDS.csv",
col_types = cols(.default = col_factor(),
store = col_factor(levels = c("Klein", "Macys", "Saks"))
)
) %>%
filter(r != "d") %>%
droplevels()
levels(ds$r)
levels(ds$store)
str(ds)
mod1 <- glm(r ~ store * emphasis, data = ds, family = binomial)
summary(mod1)
mod2 <- glm(r ~ store * word, data = ds, family = binomial)
summary(mod2)
mod3 <- glm(r ~ emphasis * word, data = ds, family = binomial)
summary(mod3)
modelo <- glm(r ~ store + emphasis + word, data = ds, family = binomial)
summary(modelo)
#(3) Qual é o índice C deste modelo?
lrm(r ~ store + emphasis + word, data = ds)
log(x/(1-x)) # Gelman & Hill (2007:80)
# Essas funções não existem na instalação base do R nem em outros pacotes
# de Gries 2013
logit <- function(x) { # logit: maps the range (0,1) to the range -infinite to + infinite)
log(x/(1-x)) # Gelman & Hill (2007:80)
}
ilogit <- function(x) { # inverse logit: maps the range (-∞,∞) to the range (0,1)
1/(1+exp(-x)) # Gelman & Hill (2007:80)
}
#(8) Calcule a probabilidade (de 0% a 100%) de se realizar o apagamento de /r/ na palavra `fourth`.
ilogit(2.9385 -0.9912)
vif(modelo)
demo_lesson()
0.742
#(4) Qual é o valor de R^2 deste modelo?"
0.212
#(8) Calcule a probabilidade (de 0% a 100%) de se realizar o apagamento de /r/ na palavra `fourth`.
ilogit(2.9385 -0.9912)
skip()
levels(ds$r)
modelo <- glm(r ~ store + emphasis + word, data = ds, family = binomial)
summary(modelo)
ds <- read_csv("LabovDS.csv",
col_types = cols(.default = col_factor(),
store = col_factor(levels = c("Klein", "Macys", "Saks")),
word = col_factor(levels = c("fouRth", "flooR"))
)
) %>%
filter(r != "d") %>%
droplevels()
str(ds)
levels(ds$r)
levels(ds$store)
levels(ds$word)
modelo <- glm(r ~ store + emphasis + word, data = ds, family = binomial)
summary(modelo)
ds <- read_csv("LabovDS.csv",
col_types = cols(.default = col_factor(),
store = col_factor(levels = c("Klein", "Macys", "Saks")),
word = col_factor(levels = c("flooR", "fouRth"))
)
) %>%
filter(r != "d") %>%
droplevels()
str(ds)
levels(ds$r)
levels(ds$store)
levels(ds$word)
modelo <- glm(r ~ store + emphasis + word, data = ds, family = binomial)
summary(modelo)
setwd("~/Dropbox/_R/swirl/Introducao_a_Estatistica_para_Linguistas_Exercicios/Estatistica_Inferencial_Regressao_Logistica_Parte2")
set_lesson("lesson.yaml")
setwd("~/Dropbox/_R/swirl/arquivosDados/testandoCurso")
rm(list = ls())
demo_lesson()
setwd("~/Dropbox/_R/swirl/arquivosDados/testandoCurso")
ds <- read_csv("LabovDS.csv",
col_types = cols(.default = col_factor(),
store = col_factor(levels = c("Klein", "Macys", "Saks")),
word = col_factor(levels = c("flooR", "fouRth"))
)
) %>%
filter(r != "d") %>%
droplevels()
str(ds)
# Essas funções não existem na instalação base do R nem em outros pacotes
# de Gries 2013
logit <- function(x) { # logit: maps the range (0,1) to the range -infinite to + infinite)
log(x/(1-x)) # Gelman & Hill (2007:80)
}
ilogit <- function(x) { # inverse logit: maps the range (-∞,∞) to the range (0,1)
1/(1+exp(-x)) # Gelman & Hill (2007:80)
}
mod1 <- glm(r ~ store * emphasis, data = ds, family = binomial)
summary(mod1)
mod2 <- glm(r ~ store * word, data = ds, family = binomial)
summary(mod2)
mod3 <- glm(r ~ emphasis * word, data = ds, family = binomial)
summary(mod3)
modelo <- glm(r ~ store + emphasis + word, data = ds, family = binomial)
summary(modelo)
#(3) Qual é o índice C deste modelo?
lrm(r ~ store + emphasis + word, data = ds)
#(8) Calcule a probabilidade (de 0% a 100%) de se realizar o apagamento de /r/ na palavra `fourth`.
ilogit(1.9473 + 0.9912)
demo_lesson()
0.742
#(4) Qual é o valor de R^2 deste modelo?"
0.212
#(8) Calcule a probabilidade (de 0% a 100%) de se realizar o apagamento de /r/ na palavra `fourth`.
ilogit(1.9473 + 0.9912)
demo_lesson()
setwd("~/Dropbox/_R/swirl/Introducao_a_Estatistica_para_Linguistas/Fundamentos")
set_lesson("lesson.yaml")
setwd("~/Dropbox/_R/swirl/arquivosDados/testandoCurso")
demo_lesson()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
y
y
y
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
setwd("~/Dropbox/_R/swirl/arquivosDados/testandoCurso")
skip()
skip()
skip()
dados
str(dados)
setwd("~/Dropbox/_R/swirl/arquivosDados/testandoCurso")
# Definir diretório de trabalho
# setwd()
# Importar planilha de dados
ds <- read_csv("LabovDS.csv",
col_types = cols(.default = col_factor(),
r = col_factor(levels = c("r0", "r1", "d"))
)
) %>%
filter(r != "d") %>%
droplevels()
tab.r <- with(ds, table(r))
tab.r
teste.prop <- prop.test(tab.r)
teste.prop
setwd("~/Dropbox/_R/swirl/Introducao_a_Estatistica_para_Linguistas/Fundamentos")
set_lesson("lesson.yaml")
#para testar possiveis problemas
test_lesson()
test_course()
#para criar o arquivo .swc do curso
pack_course()
setwd("~/Dropbox/_R/swirl/Introducao_a_Estatistica_para_Linguistas_Exercicios/Fundamentos")
set_lesson("lesson.yaml")
#para testar possiveis problemas
test_lesson()
test_course()
#para criar o arquivo .swc do curso
pack_course()
install_course()
swirl()
install.packages(c("swirl", "png", "tidyverse", "GGally", "effects", "car", "lme4", "lmerTest", "rms", "languageR", "base64enc"))
